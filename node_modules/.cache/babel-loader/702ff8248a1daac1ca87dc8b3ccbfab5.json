{"ast":null,"code":"var _jsxFileName = \"/home/yashshree/test/src/Weather.js\";\nimport React from 'react';\nimport UserLocation from './Weather_component/UserLocation.js';\nimport Navbar from './Weather_component/Navbar.js';\nimport './Weather.css';\nimport Axios from 'axios';\n\nclass Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userPosition: {\n        latitude: 35,\n        longitude: 139\n      },\n      weather: {},\n      regionInput: \"\"\n    };\n\n    this.changeRegion = value => {\n      this.setState({\n        regionInput: value\n      });\n    };\n\n    this.changeLocation = e => {\n      e.preventDefault();\n      Axios.get(`http://api.weatherstack.com/current?access_key=ee2c00a09ba65e4467143d28625d3fa2&query=${this.state.regionInput}`).then(res => {\n        let userWeather = {\n          temperature: res.data.current.temperature,\n          description: res.data.current.weather_descriptions[0],\n          location: res.data.location.name,\n          region: res.data.location.region,\n          country: res.data.location.country,\n          wind_speed: res.data.current.wind_speed,\n          pressure: res.data.current.pressure,\n          precip: res.data.current.precip,\n          humidity: res.data.current.humidity,\n          img: res.data.current.weather_icons\n        };\n        this.setState({\n          weather: userWeather\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    //check whether geolocation is supported\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        //get the lat and long of your device\n        let pos = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        };\n        this.setState({\n          userPosition: pos\n        }); //Weather Api call\n\n        Axios.get(`http://api.weatherstack.com/current?access_key=21befeeb2212d3628155a1188af50bcc&query=${this.state.userPosition.latitude},${this.state.userPosition.longitude}`).then(res => {\n          let userWeather = {\n            temperature: res.data.current.temperature,\n            description: res.data.current.weather_descriptions[0],\n            location: res.data.location.name,\n            region: res.data.location.region,\n            country: res.data.location.country,\n            wind_speed: res.data.current.wind_speed,\n            pressure: res.data.current.pressure,\n            precip: res.data.current.precip,\n            humidity: res.data.current.humidity,\n            img: res.data.current.weather_icons\n          };\n          this.setState({\n            weather: userWeather\n          });\n        });\n      });\n    }\n  } //update the value of the the input field with state\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      changeRegion: this.changeRegion,\n      changeLocation: this.changeLocation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }), \" \", /*#__PURE__*/React.createElement(UserLocation, {\n      weather: this.state.weather,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 16\n      }\n    }), \" \"), \" \");\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/home/yashshree/test/src/Weather.js"],"names":["React","UserLocation","Navbar","Axios","Weather","Component","state","userPosition","latitude","longitude","weather","regionInput","changeRegion","value","setState","changeLocation","e","preventDefault","get","then","res","userWeather","temperature","data","current","description","weather_descriptions","location","name","region","country","wind_speed","pressure","precip","humidity","img","weather_icons","componentDidMount","navigator","geolocation","getCurrentPosition","position","pos","coords","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport UserLocation from './Weather_component/UserLocation.js';\nimport Navbar from './Weather_component/Navbar.js'\nimport './Weather.css';\nimport Axios from 'axios';\n\nclass Weather extends React.Component {\n\n    //state\n    state = {\n        userPosition: {\n            latitude: 35,\n            longitude: 139\n        },\n        weather: {},\n        regionInput: \"\"\n    }\n\n    componentDidMount() {\n        //check whether geolocation is supported\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(position => {\n\n                //get the lat and long of your device\n                let pos = {\n                    latitude: position.coords.latitude,\n                    longitude: position.coords.longitude\n                }\n\n                this.setState({ userPosition: pos });\n\n                //Weather Api call\n                Axios.get(`http://api.weatherstack.com/current?access_key=21befeeb2212d3628155a1188af50bcc&query=${this.state.userPosition.latitude},${this.state.userPosition.longitude}`).then(res => {\n\n                    let userWeather = {\n                        temperature: res.data.current.temperature,\n                        description: res.data.current.weather_descriptions[0],\n                        location: res.data.location.name,\n                        region: res.data.location.region,\n                        country: res.data.location.country,\n                        wind_speed: res.data.current.wind_speed,\n                        pressure: res.data.current.pressure,\n                        precip: res.data.current.precip,\n                        humidity: res.data.current.humidity,\n                        img: res.data.current.weather_icons\n                    }\n\n                    this.setState({ weather: userWeather });\n                })\n            })\n        }\n    }\n\n    //update the value of the the input field with state\n    changeRegion = (value) => {\n        this.setState({ regionInput: value })\n    }\n\n    //update the weather depending upon the value user entered\n    changeLocation = (e) => {\n\n        e.preventDefault()\n\n        Axios.get(`http://api.weatherstack.com/current?access_key=ee2c00a09ba65e4467143d28625d3fa2&query=${this.state.regionInput}`).then(res => {\n\n            let userWeather = {\n                temperature: res.data.current.temperature,\n                description: res.data.current.weather_descriptions[0],\n                location: res.data.location.name,\n                region: res.data.location.region,\n                country: res.data.location.country,\n                wind_speed: res.data.current.wind_speed,\n                pressure: res.data.current.pressure,\n                precip: res.data.current.precip,\n                humidity: res.data.current.humidity,\n                img: res.data.current.weather_icons\n            }\n\n            this.setState({ weather: userWeather });\n\n        })\n    }\n\n    render() {\n        return ( <\n            div className = \"App\" >\n            <\n            div className = \"container\" >\n            <\n            Navbar changeRegion = { this.changeRegion }\n            changeLocation = { this.changeLocation }\n            /> <\n            UserLocation weather = { this.state.weather }\n            /> <\n            /div> <\n            /div>\n        );\n    }\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}